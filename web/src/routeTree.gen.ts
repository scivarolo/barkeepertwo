/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ShoppingListIndexRouteImport } from './routes/shopping-list/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as CocktailsIndexRouteImport } from './routes/cocktails/index'
import { Route as BarIndexRouteImport } from './routes/bar/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as IngredientsIngredientIdRouteImport } from './routes/ingredients/$ingredientId'
import { Route as CocktailsCocktailIdRouteImport } from './routes/cocktails/$cocktailId'
import { Route as CocktailsCocktailIdEditRouteImport } from './routes/cocktails/$cocktailId.edit'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShoppingListIndexRoute = ShoppingListIndexRouteImport.update({
  id: '/shopping-list/',
  path: '/shopping-list/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const CocktailsIndexRoute = CocktailsIndexRouteImport.update({
  id: '/cocktails/',
  path: '/cocktails/',
  getParentRoute: () => rootRouteImport,
} as any)
const BarIndexRoute = BarIndexRouteImport.update({
  id: '/bar/',
  path: '/bar/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const IngredientsIngredientIdRoute = IngredientsIngredientIdRouteImport.update({
  id: '/ingredients/$ingredientId',
  path: '/ingredients/$ingredientId',
  getParentRoute: () => rootRouteImport,
} as any)
const CocktailsCocktailIdRoute = CocktailsCocktailIdRouteImport.update({
  id: '/cocktails/$cocktailId',
  path: '/cocktails/$cocktailId',
  getParentRoute: () => rootRouteImport,
} as any)
const CocktailsCocktailIdEditRoute = CocktailsCocktailIdEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => CocktailsCocktailIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cocktails/$cocktailId': typeof CocktailsCocktailIdRouteWithChildren
  '/ingredients/$ingredientId': typeof IngredientsIngredientIdRoute
  '/admin': typeof AdminIndexRoute
  '/bar': typeof BarIndexRoute
  '/cocktails': typeof CocktailsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/shopping-list': typeof ShoppingListIndexRoute
  '/cocktails/$cocktailId/edit': typeof CocktailsCocktailIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cocktails/$cocktailId': typeof CocktailsCocktailIdRouteWithChildren
  '/ingredients/$ingredientId': typeof IngredientsIngredientIdRoute
  '/admin': typeof AdminIndexRoute
  '/bar': typeof BarIndexRoute
  '/cocktails': typeof CocktailsIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/shopping-list': typeof ShoppingListIndexRoute
  '/cocktails/$cocktailId/edit': typeof CocktailsCocktailIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cocktails/$cocktailId': typeof CocktailsCocktailIdRouteWithChildren
  '/ingredients/$ingredientId': typeof IngredientsIngredientIdRoute
  '/admin/': typeof AdminIndexRoute
  '/bar/': typeof BarIndexRoute
  '/cocktails/': typeof CocktailsIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/shopping-list/': typeof ShoppingListIndexRoute
  '/cocktails/$cocktailId/edit': typeof CocktailsCocktailIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cocktails/$cocktailId'
    | '/ingredients/$ingredientId'
    | '/admin'
    | '/bar'
    | '/cocktails'
    | '/settings'
    | '/shopping-list'
    | '/cocktails/$cocktailId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cocktails/$cocktailId'
    | '/ingredients/$ingredientId'
    | '/admin'
    | '/bar'
    | '/cocktails'
    | '/settings'
    | '/shopping-list'
    | '/cocktails/$cocktailId/edit'
  id:
    | '__root__'
    | '/'
    | '/cocktails/$cocktailId'
    | '/ingredients/$ingredientId'
    | '/admin/'
    | '/bar/'
    | '/cocktails/'
    | '/settings/'
    | '/shopping-list/'
    | '/cocktails/$cocktailId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CocktailsCocktailIdRoute: typeof CocktailsCocktailIdRouteWithChildren
  IngredientsIngredientIdRoute: typeof IngredientsIngredientIdRoute
  AdminIndexRoute: typeof AdminIndexRoute
  BarIndexRoute: typeof BarIndexRoute
  CocktailsIndexRoute: typeof CocktailsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  ShoppingListIndexRoute: typeof ShoppingListIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shopping-list/': {
      id: '/shopping-list/'
      path: '/shopping-list'
      fullPath: '/shopping-list'
      preLoaderRoute: typeof ShoppingListIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cocktails/': {
      id: '/cocktails/'
      path: '/cocktails'
      fullPath: '/cocktails'
      preLoaderRoute: typeof CocktailsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bar/': {
      id: '/bar/'
      path: '/bar'
      fullPath: '/bar'
      preLoaderRoute: typeof BarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ingredients/$ingredientId': {
      id: '/ingredients/$ingredientId'
      path: '/ingredients/$ingredientId'
      fullPath: '/ingredients/$ingredientId'
      preLoaderRoute: typeof IngredientsIngredientIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cocktails/$cocktailId': {
      id: '/cocktails/$cocktailId'
      path: '/cocktails/$cocktailId'
      fullPath: '/cocktails/$cocktailId'
      preLoaderRoute: typeof CocktailsCocktailIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cocktails/$cocktailId/edit': {
      id: '/cocktails/$cocktailId/edit'
      path: '/edit'
      fullPath: '/cocktails/$cocktailId/edit'
      preLoaderRoute: typeof CocktailsCocktailIdEditRouteImport
      parentRoute: typeof CocktailsCocktailIdRoute
    }
  }
}

interface CocktailsCocktailIdRouteChildren {
  CocktailsCocktailIdEditRoute: typeof CocktailsCocktailIdEditRoute
}

const CocktailsCocktailIdRouteChildren: CocktailsCocktailIdRouteChildren = {
  CocktailsCocktailIdEditRoute: CocktailsCocktailIdEditRoute,
}

const CocktailsCocktailIdRouteWithChildren =
  CocktailsCocktailIdRoute._addFileChildren(CocktailsCocktailIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CocktailsCocktailIdRoute: CocktailsCocktailIdRouteWithChildren,
  IngredientsIngredientIdRoute: IngredientsIngredientIdRoute,
  AdminIndexRoute: AdminIndexRoute,
  BarIndexRoute: BarIndexRoute,
  CocktailsIndexRoute: CocktailsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  ShoppingListIndexRoute: ShoppingListIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
