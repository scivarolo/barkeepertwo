generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  username           String           @unique
  passwordHash       String
  createdCocktails   Cocktail[]
  createdIngredients Ingredient[]
  createdProducts    Product[]
  shoppingItems      ShoppingItem[]
  tabCocktails       TabCocktail[]
  cocktails          UserCocktail[]
  history            UserHistory[]
  ingredients        UserIngredient[]
  products           UserProduct[]
}

model Cocktail {
  id            Int                  @id @default(autoincrement())
  name          String
  instructions  String?
  notes         String?
  createdById   String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     User                 @relation(fields: [createdById], references: [id])
  ingredients   CocktailIngredient[]
  tabCocktail   TabCocktail[]
  userCocktails UserCocktail[]
  userHistory   UserHistory[]
}

model CocktailIngredient {
  id           Int        @id @default(autoincrement())
  amount       Decimal
  units        String?
  cocktailId   Int
  ingredientId Int
  productId    Int?
  order        Int
  cocktail     Cocktail   @relation(fields: [cocktailId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  product      Product?   @relation(fields: [productId], references: [id])
}

model Ingredient {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  createdById         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  ingredientTypeId    Int?
  cocktailIngredients CocktailIngredient[]
  createdBy           User                 @relation(fields: [createdById], references: [id])
  type                IngredientType?      @relation(fields: [ingredientTypeId], references: [id])
  products            Product[]
  shoppingItems       ShoppingItem[]
  userIngredients     UserIngredient[]
}

model IngredientType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  isLiquid    Boolean      @default(true)
  ingredients Ingredient[]
}

model Product {
  id                  Int                  @id @default(autoincrement())
  name                String
  ingredientId        Int
  createdById         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cocktailIngredients CocktailIngredient[]
  createdBy           User                 @relation(fields: [createdById], references: [id])
  ingredient          Ingredient           @relation(fields: [ingredientId], references: [id])
  shoppingItems       ShoppingItem[]
  userProducts        UserProduct[]
}

model UserCocktail {
  id         Int      @id @default(autoincrement())
  userId     String
  cocktailId Int
  dateAdded  DateTime @default(now())
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, cocktailId])
}

model UserIngredient {
  id           Int        @id @default(autoincrement())
  userId       String
  ingredientId Int
  dateAdded    DateTime   @default(now())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, ingredientId])
}

model UserProduct {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  dateAdded DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model UserHistory {
  id         Int      @id @default(autoincrement())
  drinkDate  DateTime @default(now())
  userId     String
  cocktailId Int
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model ShoppingItem {
  id           Int         @id @default(autoincrement())
  quantity     Int         @default(1)
  ingredientId Int?
  productId    Int?
  userId       String
  dateAdded    DateTime    @default(now())
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  product      Product?    @relation(fields: [productId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
}

model TabCocktail {
  id         Int      @id @default(autoincrement())
  cocktailId Int
  userId     String
  cocktail   Cocktail @relation(fields: [cocktailId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
